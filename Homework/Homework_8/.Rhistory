knitr::opts_chunk$set(echo = TRUE)
# We start by loading the libraries needed for capturing and processing the text
library(tidyverse)
library(here)
library(pdftools)
library(tidytext)
library(textdata)
library(ggwordcloud)
# Here we save our text as a variable with the here() function
got_location <- here("data","got.pdf")
got_text <- pdf_text(got_location)
got_df <- data.frame(got_text) %>%
mutate(text_full = str_split(got_text, pattern = '\\n')) %>%
unnest(text_full) %>%
mutate(text_full = str_trim(text_full))
got_df
got_df <- data.frame(got_text) %>% # we convert our text-variable into a dataframe
mutate(text_full = str_split(got_text, pattern = '\\n')) %>%  # we use str_split to split the pages
unnest(text_full) %>%  # Then we unnest it onto regular columns
mutate(text_full = str_trim(text_full)) # We trim the whitespace with str_trim()
got_df
got_tokens <- got_df %>%
unnest_tokens(word, text_full)
# See how this differs from `ipcc_df`
# Each word has its own row!
got_tokens
got_tokens <- got_df %>%
unnest_tokens(word, text_full)
# See how this differs from `ipcc_df`
# Each word has its own row!
got_tokens
wordcount_got <- got_tokens %>%
count(word) %>%
arrange(-n)
wordcount_got
wordcount_got <- got_tokens %>%  # States that the variable should use information from our token variable
count(word) %>%  # Count each word an
arrange(-number)
wordcount_got <- got_tokens %>%  # States that the variable should use information from our token variable
count(word) %>%  # Count each word an
arrange(-n)
wordcount_got
got_stop <- got_tokens %>%
anti_join(stop_words) %>%
select(-got_text)
got_stop <- got_tokens %>%
anti_join(stop_words) %>%
select(-got_text)
got_swc <- got_stop %>%
count(word) %>%
arrange(-n)
got_swc
got_top50 <- got_swc %>%
count(word) %>%
arrange(-n) %>%
head(50)
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "diamond") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkgreen","blue","red")) +
theme_minimal()
got_no_numeric <- got_stop %>%
filter(is.na(as.numeric(word)))
got_no_numeric
length(unique(got_no_numeric$word)) # We then check the length of unique words in our new variable
got_top50 <- got_no_numeric %>%
count(word) %>%
arrange(-n) %>%
head(50)
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "diamond") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkgreen","blue","red")) +
theme_minimal()
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "diamond") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkred","darkyellow","green")) +
theme_minimal()
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "diamond") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkred","yellow","green")) +
theme_minimal()
got_top50 <- got_no_numeric %>%
count(word) %>%
arrange(-n) %>%
head(50)
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "star") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkred","yellow","green")) +
theme_minimal()
ggplot(data = got_top50, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkred","yellow","green")) +
theme_minimal()
got_top200 <- got_no_numeric %>% # We make a variable in which the
count(word) %>%
arrange(-n) %>%
head(200)
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 12) +
scale_color_gradientn(colors = c("darkred","yellow","green")) +
theme_minimal()
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 12) +
scale_color_gradientn(low = "darkblue", high = "blue") +
theme_minimal()
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 12) +
scale_color_gradient(low = "darkblue", high = "blue") +
theme_minimal()
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 12) +
scale_color_gradient(low = "darkblue", high = "lightblue") +
theme_minimal()
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "cloud") +
scale_size_area(max_size = 16) +
scale_color_gradient(low = "darkblue", high = "lightblue") +
theme_minimal()
ggplot(data = got_top200, aes(label = word, size = n)) +
geom_text_wordcloud_area(aes(color = n), shape = "circle") +
scale_size_area(max_size = 16) +
scale_color_gradient(low = "darkblue", high = "lightblue") + # I used the darkblue and lightblue contrast because it seemed fitting to the storys themes about winter and the cold.
theme_minimal()
get_sentiments(lexicon = "afinn")
# Note: may be prompted to download (yes)
# Let's look at the pretty positive words:
afinn_pos <- get_sentiments("afinn") %>%
filter(value %in% c(3,4,5))
# Do not look at negative words in class.
afinn_pos
got_afinn <- got_stop %>%
inner_join(get_sentiments("afinn"))
# Plot them:
ggplot(data = got_afinn_hist, aes(x = value, y = n)) +
geom_col()
got_afinn_hist <- got_afinn %>%
count(value)
# Plot them:
ggplot(data = got_afinn_hist, aes(x = value, y = n)) +
geom_col()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
coord_flip()
# OK so what's the deal with confidence? And is it really "positive" in the emotion sense?
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
scale_y_continuous(0,50) +
coord_flip()
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
scale_x_continuous(0,50) +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
scale_x_datetime(limits = xlim) +
scale_y_continuous(0,50) +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
ylim(0,200)
coord_flip()
# OK so what's the deal with confidence? And is it really "positive" in the emotion sense?
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
ylim(0,200) +
coord_flip()
# OK so what's the deal with confidence? And is it really "positive" in the emotion sense?
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
xlim(0,200) +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
xlim(200) +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
ylim(200) +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
geom_col() +
ylim(100,200) +
coord_flip()
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n, width = 0.25)) +
geom_col() +
coord_flip()
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n, width = 1)) +
geom_col() +
coord_flip()
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n, xwidth = 1)) +
geom_col() +
coord_flip()
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n, xwidth = 15)) +
geom_col() +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
scale_x_continuous(limits = c(0, 200)) +
geom_col() +
coord_flip()
# What are these '2' words?
got_afinn_minus2 <- got_afinn %>%
filter(value == -2)
# Check the unique 2-score words:
unique(got_afinn_minus2$word)
# Count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) +
scale_y_continuous(limits = c(0, 200)) +
geom_col() +
coord_flip()
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
got_afinn_minus2_n2 <- got_afinn_minus2_n %>% # We make a variable in which the 200 most occurring words are chosen
count(word) %>%
arrange(-n) %>%
head(200)
ggplot(data = got_afinn_minus2_n2, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
scale_y_continuous(limits = c(0, 200)) +
geom_col() +
coord_flip()
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
got_afinn_minus2_n2 <- got_afinn_minus2_n %>% # We make a variable in which the 200 most occurring words are chosen
count(word) %>%
arrange(-n) %>%
head(200)
ggplot(data = got_afinn_minus2_n2, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
geom_col() +
coord_flip()
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
head(200)
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
scale_y_continuous(limits = c(0, 200)) +
geom_col() +
coord_flip()
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
head(50)
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
scale_y_continuous(limits = c(0, 200)) +
geom_col() +
coord_flip()
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
head(50) # I tried to sample a smaller size since the
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
geom_col() +
coord_flip()
got_afinn_minus2_n
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
head(50) # I tried to sample a smaller size since the number of results messes with my vizualisation
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
geom_col() +
coord_flip()
got_afinn_minus2_n
print(got_afinn_minus2_n)
print(got_afinn_minus2_n)
got_afinn_minus2 <- got_afinn %>%
filter(value == -2) # We filter the -2 values and save it as a variable.
unique(got_afinn_minus2$word) # We count the unique occurences
# we count & plot them
got_afinn_minus2_n <- got_afinn_minus2 %>%
count(word, sort = TRUE) %>%
mutate(word = fct_reorder(factor(word), n))
head(50) # I tried to sample a smaller size since the number of results messes with my vizualisation
ggplot(data = got_afinn_minus2_n, aes(x = word, y = n)) + # This one was definitely tougher to visualize so feedback here is appreciated.
geom_col() +
coord_flip()
